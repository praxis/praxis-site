angular.module("DocBrowser",["PraxisDocBrowser"]),angular.module("DocBrowser",["PraxisDocBrowser"]).config(["templateForProvider",function(a){a.title="API Browser - ProductPlan",a.versionLabel="Version",a.expandChildren=!0,a.register(["$type","$requestedTemplate",function(a,b){if("Extensions::Types::PaginationParams"===a){if("main"===b)return"views/types/main/pagination_params.html";if("embedded"===b)return"views/types/embedded/pagination_params.html"}else if("Extensions::Types::OrderingParams"===a){if("embedded"===b)return"views/types/embedded/ordering_params.html"}else{if("Extensions::Types::FilteringParams"!==a)return void 0;if("embedded"===b)return"views/types/embedded/filtering_params.html"}}])}]).config(["$stateProvider",function(a){a.state("root.pagination_params",{url:"/concepts/pagination_params",templateUrl:"views/concepts/pagination_params.html"}).state("root.ordering_params",{url:"/concepts/ordering_params",templateUrl:"views/concepts/ordering_params.html"}).state("root.filtering_params",{url:"/concepts/filtering_params",templateUrl:"views/concepts/filtering_params.html"})}]).config(["ExamplesProvider",function(a){function b(a,b){var c="var request = new XMLHttpRequest();\n\n";return!b.endpoint,c+="request.open('"+a.urls[0].verb+"', '"+b.endpoint+a.urls[0].example+"');\n\n",c+=_.map(a.headers.type.attributes,function(a,b){return"request.setRequestHeader('"+b+"', '"+a.example+"');"}).join("\n"),c+="\nrequest.setRequestHeader('Content-Type', '"+_.get(a,"payload.examples.json.content_type","text/json")+"');\n\n",c+="\nrequest.onreadystatechange = function () {\n  if (this.readyState === 4) {\n    console.log('Status:', this.status);\n    console.log('Headers:', this.getAllResponseHeaders());\n    console.log('Body:', this.responseText);\n  }\n};\n\n",a.payload?(c+="var body = "+a.payload.examples.json.body+";\n\n",c+="request.send(JSON.stringify(body));"):c+="request.send();",c}function c(a,b,c){!c.endpoint;var d="// Define Client:\n";d+="angular.module('Models').service('"+a.display_name+"', ['$http', function($http) {\n",d+="  this."+_.camelCase(b.name)+" = function(data) {\n",d+="    return $http({\n",d+="      method: '"+b.urls[0].verb+"',\n",d+="      url: '"+c.endpoint+(b.urls[0].path.replace(/:([\w_]+)/g,function(a,b){return"' + data."+_.camelCase(b)+" + '"})+"'").replace(/ \+ ''$/,"")+",\n";var e=_.get(b,"params.type.attributes",{});_.some(e,{source:"query"})&&(d+="      params: {\n",_.each(e,function(a,b){"query"===a.source&&(d+="        "+b+": data."+_.camelCase(b)+",\n")}),d+="      },\n");var f=_.get(b,"headers.type.attributes",{});_.keys(f).length>0&&(d+="      headers: {\n",_.each(f,function(a,b){d+=a.values&&1===a.values.length?"        "+_.snakeCase(b)+": '"+a.values[0]+"',\n":"        "+_.snakeCase(b)+": data."+_.camelCase(b)+",\n"}),d+="      },\n");var g=_.get(b,"payload.type.attributes",{});return _.keys(g).length>0&&(d+="      data: {\n",_.each(g,function(a,b){d+=a.values&&1===a.values.length?"        "+b+": '"+a.values[0]+"',\n":"        "+b+": data."+_.camelCase(b)+",\n"}),d+="      },\n"),d+="    });\n",d+="  };\n",d+="}]);\n\n",d+="// Example Usage:\n",d+="angular.module('Controllers').controller('"+a.display_name+"Controller', ['"+a.display_name+"', '$scope', function("+a.display_name+", $scope) {\n",d+="  "+a.display_name+"."+_.camelCase(b.name)+"({\n",_.each(e,function(a,b){d+="    "+b+": "+JSON.stringify(a.example,null,2)+",\n"}),_.each(f,function(a,b){!a.example||a.values&&1==a.values.length||(d+="    "+_.snakeCase(b)+": "+JSON.stringify(a.example,null,2)+",\n")}),_.each(g,function(a,b){!a.example||a.values&&1==a.values.length||(d+="    "+b+": "+JSON.stringify(a.example,null,2)+",\n")}),d+="  }).then(function(result) {\n",d+="    $scope.result = result.data;\n",d+="  });\n",d+="}]);\n"}a.register("browser-javascript","JavaScript",["$compile","$context","Documentation",function(a,d,e){"ngInject";return e.info(d.version).then(function(e){var f='<h3>Plain JavaScript</h3>\n<pre highlight="javascript">'+b(d.action,e)+"</pre>\n\n";return f+='<h3>Angular</h3>\n<pre highlight="javascript">'+c(d.resource,d.action,e)+"</pre>\n\n",a(f)})}])}]),angular.module("DocBrowser").run(["$templateCache",function(a){"use strict";a.put("views/builtin/field-selector.html",'<div class=row><div class=col-lg-12><h1 class=page-header>FieldSelector</h1><p>Field Selectors allow you to specify in a request exactly what data you wish to recieve in the response. This allows the client to get an efficient response with only the fields required.</p><p>The fields can come from the endpoint ºs associated Schema, or from an attribute exposed in any of the views of the resource. Multiple fields are separated by commas.</p><p>You can also select properties from nested schemas of a parent schema using curly braces. For example, requesting <code>id,name,links{roadmap,child_bars{href}}</code> on a <strong>Bar</strong> resource would look like this:</p><br>Request:<pre>https://app.productplan.com/api/bars/16?view=full&fields=id,name,links{roadmap,child_bars{href}}</pre>Response:<br><pre><code class=language-json>{\n  "id": 16,\n  "name": "A New Name",\n  "links": {\n    "roadmap": {\n      "href": "/api/roadmaps/1"\n    },\n    "child_bars": {\n      "href": "/api/bars/16/child_bars"\n    }\n  }\n}</code></pre><br><p>If you do not specify attributes of nested properties, the <code>default</code> view will be used to render them.</p></div></div>'),a.put("views/concepts/filtering_params.html",'<div class=row><div class=col-lg-12><h1 class=page-header>Filtering Params</h1><p>Endpoint actions that provide filtering allow you to select a subset of items within the resource collection, based on one or more filters describing matching requirements for the items.</p><p>Filters in an action will specify the list of allowed fields along with a set of operators that can be used to describe how to match their values.</p><br><h2>Operators</h2><p>The superset of supported operators are:</p><table class=description><tbody><tr><td><code>=</code></td><td>Selects items where the field\'s value matches the specified value (see <i>fuzzy matching</i> and <i>matching multiple values</i>)</td></tr><tr><td><code>!=</code></td><td>Selects items where the field\'s value does not match the specified value</td></tr><tr><td><code>&lt;</code></td><td>Selects items where the field\'s value is smaller than the specified value</td></tr><tr><td><code>&gt;</code></td><td>Selects items where the field\'s value is greater than the specified value</td></tr><tr><td><code>&lt;=</code></td><td>Selects items where the field\'s value is smaller than or equal to the specified value</td></tr><tr><td><code>&gt;=</code></td><td>Selects items where the field\'s value is greater than or equal to the specified value</td></tr></tbody></table><br><h3>Fuzzy Matching</h3><p>Filters may also accept values for a field with <code>fuzzy</code> matching, which allows one to prefix or postfix match a value by adding a <code>*</code> to the beggining or the end of it. Note that this does not allow free-form pattern matching, as it will only be accepted at the beggining or at the end.</p><br><h3>Matching Multiple Values</h3><p>A filter can contain multiple values for which a field\'s value may match. Each of the allowed values must be separated by <code>,</code>.</p><br><h2>Multiple Matches</h2><p>A filter expression can contain multiple matches on a field (including repeating a field when appropriate). Each of the matches must be separated by <code>&</code>.</p><br><h2>Examples</h2><table class=description><tbody><tr><td><code>email=joe@example.com</code></td><td>Filter elements having an email value of "joe@example.com"</td></tr><tr><td><code>start_date>2001-1-1</code></td><td>Filter elements having a start_date later than "January 1, 2001"</td></tr><tr><td><code>parent.id=1,2,3</code></td><td>Filter elements belonging to parents with id "1", "2", or "3"</td></tr><tr><td><code>salary&lt;=50000&job=Admin*</code></td><td>Filter elements having a salary up to and including $50K and a job which starts with "Admin"</td></tr></tbody></table><p>Note: These examples are presented in the raw syntax, but they will all need to be properly encoded when passed as the value of the <code>filters</code> parameter in the query string. For example:</p><ul><li><code>filters=parent.id=1,2,3&name=Joe*</code> will become <code>filters=parent.id%3D1%2C2%2C3%26name%3DJoe%2A</code> after encoding it</li></ul></div></div>'),a.put("views/concepts/ordering_params.html","<div class=row><div class=col-lg-12><h1 class=page-header>Ordering Params</h1><p>Endpoint actions that provide the order parameter allow you to specify the order with which the collection will be presented. This is especially important in conjunction with <a href=#/concepts/pagination_params>pagination</a> to make sure the traversal follows a consistent direction, but it is also useful to presort a particular result set even if all elements have been received.</p><p>Built-in sorting supports a syntax inpired by the JSON-API specification. It allows you to sort by multiple fields to resolve tie-breakers, and each field can be defined with a <code>-</code> or <code>+</code> sign to indicate descending or ascending order. The lack of sign defaults to ascending order.</p><p>Here are some handy examples:</p><ul><li><code>-id</code>: &nbsp; Sort by the values of the <code>id</code> field, in descending order</li><li><code>name,-start_date,id</code>: &nbsp; Sort by <code>name</code> values, then by descending order of <code>start_date</code>, and finally by <code>id</code></li></ul><br><p>Ordering definitions are commonly bound to the MediaType of the associated collection to retrieve, so only the field names of the MediaType are going to be allowed. It is also possible that an ordering type restricts the fields by which one can sort. Look at the action specifications for details.</p><p>If the ordering definition specifies that only the first ordering position will be enforced, then the first field specified in the order parameter must be a field specified by the ordering definition. However, that does not mean that you cannot specify other fields in the order parameter, in subsequent positions. For example, if the ordering definition specifies the fields <code>id,name</code>:</p><ul><li><strong>valid</strong>:&nbsp; <code>id</code>, <code>name</code>, <code>-name,id</code>, <code>name,-start_date</code>, <code>name,description</code>, <code>name,start_date,-effort,id</code>, etc</li><li><strong>invalid</strong>:&nbsp; <code>start_date</code>, <code>start_date,name</code>, <code>description,id</code>, <code>effort,name,id</code>, <code>effort,start_date,name,id</code>, etc</li></ul><br><p>If the ordering definition specifies that all ordering positions will be enforced, then every one of the fields specified in the order parameter must be a field specified by the ordering definition. For example, if the ordering definition specifies the fields <code>id,name</code>:</p><ul><li><strong>valid</strong>:&nbsp; <code>id</code>, <code>name</code>, <code>id,name</code>, <code>id,-name</code>, <code>name,id</code>, <code>name,-id</code>, etc</li><li><strong>invalid</strong>:&nbsp; <code>start_date</code>, <code>id,start_date</code>, <code>name,start_date</code>, <code>name,effort</code>, <code>name,id,effort</code>, etc</li></ul></div></div>"),a.put("views/concepts/pagination_params.html",'<div class=row><div class=col-lg-12><h1 class=page-header>Pagination Params</h1><p>Endpoint actions that provide the pagination parameter restrict how many items of the targetted colletion can be received in a single request. However, using the provided syntax the client can choose how to traverse such collections in a sequence of requests.</p><p>The built-in pagination supports two types of collection traversal: page- and cursor-based. Note that it is possible for an endpoint action to disable either of them, so look for the documentation on the action to see which ones are available for use.</p><p>Here are some handy examples:</p><table class=description><tbody><tr><td><code>page=2</code></td><td>Retrieve the second page of elements from the collection<br>(i.e. elements 101-200 since the default page size is 100)</td></tr><tr><td><code>page=4,items=50</code></td><td>Retrieve the fourth page of 50 elements from the collection<br>(i.e. elements 151-200)</td></tr><tr><td><code>by=id</code></td><td>Retrieve the first set of elements from the collection based on the ascending order of their <code>id</code> field (ie: first 100 elements since the default page size is 100)</td></tr><tr><td><code>by=name,from=alice</code></td><td>Retrieve a page worth of elements from the collection based on the ascending order of their <code>name</code> field, starting at the first value <strong>after</strong> "alice".</td></tr><tr><td><code>page=1,total_count=true</code></td><td>Retrieve the first page of elements from the collection (page-based unknown sorting), and include the total count in the <code>Total-Count</code> header.</td></tr></tbody></table><p>Note: These example values are presented in the raw syntax, but they will all need to be properly encoded when passed in the query string parameters. For example: <code>pagination=page%3D1%2Ctotal_count%3Dtrue</code></p><br><h2>Page-based</h2><p>Page-based pagination returns part of the collection given a fixed page size and based on the underlying ordering specification. If the ordering specification is not directly set by the <code>order</code> param, it is considered to be "unknown" and will be whatever the underlying implementation decides is most optimal.</p><p>Typically this type of pagination is associated with the well known "offset/limit" queries and allows you to jump directly to any of the existing pages of the result set.</p><p>This pagination type is enabled by using the <code>page</code> parameter:</p><ul><li><code>page=&lt;integer&gt;</code> indicates which page number to retrieve (based on a given page size)</li><li>setting the page size on a per-request basis can be achieved by setting <code>items=&lt;integer&gt;</code></li><li>example: <code>page=5,items=50</code> returns items 201-250 from the collection</li></ul><br><h2>Cursor-based</h2><p>Cursor-based pagination is usually a more efficient way to traverse an entire collection. However, this type of pagination does not allow jumping directly to any page of the collection as it requires you to know the last seen value.</p><p>This pagination type is enabled by utilizing the <code>by</code> parameter:</p><ul><li><code>by=&lt;field name&gt;</code> allows traversal of the collection based on ascending order of that field\'s values</li><li>when also using <code>from=&lt;field value&gt;</code>, the retrieved page will start from values <strong>after</strong> the given one. The collection returned when no <code>from</code> value is specified is the very first in the result set.</li><li>the default page size can be overriden on a per-request basis by specifying <code>items=&lt;integer&gt;</code>. There is a ceiling on the value of <code>items</code> you can set.</li><li>example: <code>by=email,from=joe@example.com,items=100</code> traverses all elements by the "email" field in ascending order, returning a collection of [up to] 100 elements coming <strong>after</strong> the element having an email value of "joe@example.com".</li><li>Note that there is a dependency between using field-based cursor pagination and the sorting order that one might want for the results returned. In other words, the system will let you know if the use of the <code>by</code> clause in this pagination mode is incompatible with the requested sort <code>order</code>.</li><li>Note that while the system will not prevent one from doing so, cursor-based pagination by using a non-unique field should be avoided. It is possible to \'skip over\' and miss out on elements in the result sets such that you never know they exist.</li></ul><br><h2>Total-Count Header</h2><p>Regardless of the type of pagination used, one can also request to receive the total count of elements existing in the collection (pre-paging) by specifying <code>total_count=true</code>. When specified, a <code>Total-Count</code> header will be returned containing the total number of existing collection items (pre-pagination). Note that this calculation incurs an extra DB query, thus having performance implications.</p><br><h2>Link Header</h2><p>Every pagination request will return a properly populated <code>Link</code> header (as specified by RFC 5988).</p><p>When using cursor-based pagination the <code>first</code> and <code>next</code> link relationships are provided. The one exception, when only the <code>first</code> relationship is provided, is when the end of the result set is reached and the returned collection is empty.</p><p>When using page-based pagination, the <code>Link</code> header may contain the <code>first</code>, <code>prev</code>, <code>next</code>, and/or <code>last</code> relationships.</p><ul><li><code>first</code>: &nbsp; is always specified</li><li><code>prev</code>: &nbsp; is always specified, except when there is no "prev" page (ie: current == first)</li><li><code>next</code>: &nbsp; is always specified, except when <code>total_count=true</code> is requested <i>and</i> there is no "next" page available (ie: current >= last)</li><li><code>last</code>: &nbsp; is specified always and only when the <code>total_count=true</code> is requested</li></ul></div></div>'),a.put("views/home.html",'<h1>ProductPlan REST API v1</h1><hr><div id=overview><p>The ProductPlan API provides you with a powerful tool to access and modify your ProductPlan roadmap data. Its main purpose is to provide the ability to synchronize with other data sources, either internal to your company or with other commercial products. The API allows you to view, edit, and add to your ProductPlan data on your roadmap or Parking Lot.</p><p>The API provides the following capabilities:<ul id=feature_list><li>List your roadmaps</li><li>Import one or more ideas to a Parking Lot</li><li>Synchronize percentage complete, title, description, and other fields</li><li>Create, update, or delete ideas in a Parking Lot</li><li>Update bars on a roadmap (except the dates)</li></ul></p><p>The ProductPlan RESTful API may be used by any current ProductPlan user to access and modify specific application data.</p><p>This documentation references all Resource Endpoints (HTTP methods and URL paths) and Schemas (available resource data structures) available in the API, and how to issue those requests.</p><p>For additional assistance or support please contact us at <a href="mailto:support@productplan.com?Subject=API%20Feedback">support@productplan.com</a>. We appreciate any feedback or suggestions.</p></div><div id=schemas class=h2_section><br><h2>Schemas</h2><hr><p>Schemas define the structure of the attributes for each of the exposed API resources.</p></div><div id=resource_endpoints class=h2_section><br><h2>Resource Endpoints</h2><hr><p>To interact with a given resource endpoint one needs to send an HTTP request to the appropriate URI, and always provide the desired API version and OAuth authentication headers.</p><div id=uri class=h3_section><br><h3>URI</h3><p>All resource endpoints can be accessed using the same URI prefix of:<pre>https://app.productplan.com/api</pre></p></div><div id=api_version class=h3_section><br><h3>API Version</h3><p>Every request requires the API version to be specified. Requesting a specific API version is done by providing the <code>X-Api-Version</code> header or by adding the <code>api_version</code> query string parameter. Currently only version 1 is available.</p><p>For example, requesting version 1 through the headers will look like:<pre>X-Api-Version: 1</pre></p></div><div id=authentication_authorization class=h3_section><br><h3>Authentication &amp; Authorization</h3><p>Every request requires a <strong>Personal Access Token</strong>, or <i>API Token</i>, to authenticate.</p><p>This token will map to one specific ProductPlan user. If your account has multiple users, make sure to choose a user who has the appropriate authorization you will need in order to perform the tasks you require of the API (i.e. a user with edit access to the roadmap in question).</p><p>In the ProductPlan application, navigate to <strong>Your Settings</strong> (click on your email address in the upper-right), and then <strong>API Token</strong> (<a href=/user_settings/personal_token target=_blank>direct link</a>). Follow the instructions for generating the key. Once the 64 character unique hash key is created and displayed, copy it somewhere safe and use it for authentication to the API.</p><p>For example, if your generated token is "0c8e87e3e4bb1c3f5c5acfbe7647e7651c31ac3114a67ee8512547e4fc416177", you would use it to authenticate like this:<pre>Authorization: Bearer 0c8e87e3e4bb1c3f5c5acfbe7647e7651c31ac3114a67ee8512547e4fc416177</pre>Please note that the word "Bearer" must be included in the value and that there is one (and only one!) space between "Bearer" and the token.</p></div><div id=content_type class=h3_section><br><h3>Content-Type</h3><p>The ProductPlan API is JSON based. As such, any incoming request that transports a payload must appropriately identify its encoding by setting the <code>Content-Type</code> header as <code>application/json</code>. This is because some tools assume the lack of Content-Type definition as defaulting to url-form-encoding, but this will not be accepted by the API.<pre>Content-Type: application/json</pre></p></div></div><div id=examples class=h2_section><br><h2>Examples</h2><hr><p>Following are a few simple examples for the <a href=#/1/controller/V1-Endpoints-Ideas>Ideas</a> Resource using <strong>cURL</strong>.</p><p class="alert alert-info"><strong>Hint:</strong>&nbsp; An <a href=#/1/type/V1-MediaTypes-Idea>Idea</a> is contained in a <a href=#/1/type/V1-MediaTypes-Roadmap>Roadmap\'s</a> <i>Parking Lot</i>.</p><div id=example_idea_index class=h3_section><br><h3>View all of your Ideas</h3><br><h5>Request:</h5><pre>curl --get -g \\\n     --header "X-Api-Version: 1" \\\n     --header "Authorization: Bearer ${API_TOKEN}" \\\n     --data-urlencode "fields=href,id,name,fields,links{roadmap}" \\\n     https://app.productplan.com/api/ideas</pre><br><h5>Response:</h5><p><code>Status: 200 OK</code></p><pre><code class=language-json>\n      [\n        {\n          "href": "/api/ideas/59",\n          "id": 59,\n          "name": "Design",\n          "fields": {\n            "pp_lanes": "This is a Lane",\n            "pp_legend": "This is a Label"\n          },\n          "links": {\n            "roadmap": {\n              "href": "/api/roadmaps/1"\n            }\n          }\n        },\n        {\n          "href": "/api/ideas/60",\n          "id": 60,\n          "name": "Implementation",\n          "fields": {\n            "pp_lanes": "Customize Your Roadmap",\n            "pp_legend": "Click the Legend or Label to edit"\n          },\n          "links": {\n            "roadmap": {\n              "href": "/api/roadmaps/1"\n            }\n          }\n        },\n        {\n          "href": "/api/ideas/61",\n          "id": 61,\n          "name": "Add OAuth2 Authentication",\n          "fields": {\n            "pp_lanes": "Security",\n            "pp_legend": "3rd-Party Integrations"\n          },\n          "links": {\n            "roadmap": {\n              "href": "/api/roadmaps/1"\n            }\n          }\n        }\n      ]\n    </code></pre><br><p class="alert alert-info"><strong>Hint:</strong>&nbsp; Use the <i>Request Parameters</i> in <a href=#/1/controller/V1-Endpoints-Ideas/index>Ideas#index</a> to have more control over the data returned.</p></div><div id=example_idea_create class=h3_section><br><h3>Create a new Idea</h3><br><h5>Request:</h5><pre>curl --request POST \\\n     --header  "X-Api-Version: 1" \\\n     --header  "Authorization: Bearer ${API_TOKEN}" \\\n     --header  "Content-Type: application/json" \\\n     --data    \'{"roadmap" : { "id" : 1 }, "name" : "My New Big Idea"}\' \\\n     https://app.productplan.com/api/ideas</pre><br><h5>Response:</h5><p><code>Status: 201 Created</code><br><code>Location: /api/ideas/63</code></p><br><p class="alert alert-info"><strong>Hint:</strong>&nbsp; See <a href=#/1/controller/V1-Endpoints-Ideas/create>Ideas#create</a> for required and optional payload attributes.</p></div><div id=example_idea_update class=h3_section><br><h3>Update an existing Idea</h3><br><h5>Request:</h5><pre>curl --request PATCH \\\n     --header  "X-Api-Version: 1" \\\n     --header  "Authorization: Bearer ${API_TOKEN}" \\\n     --header  "Content-Type: application/json" \\\n     --data    \'{"name" : "My Updated Big Idea"}\' \\\n     https://app.productplan.com/api/ideas/63</pre><br><h5>Response:</h5><p><code>Status: 204 No Content</code></p><br><p class="alert alert-info"><strong>Hint:</strong>&nbsp; See <a href=#/1/controller/V1-Endpoints-Ideas/update>Ideas#update</a> for required and optional payload attributes.</p></div><div id=example_idea_show class=h3_section><br><h3>View a single Idea</h3><br><h5>Request:</h5><pre>curl --request GET \\\n     --header  "X-Api-Version: 1" \\\n     --header  "Authorization: Bearer ${API_TOKEN}" \\\n     https://app.productplan.com/api/ideas/61</pre><br><h5>Response:</h5><p><code>Status: 200 OK</code></p><pre><code class=language-json>\n      {\n        "href": "/api/ideas/61",\n        "id": 61,\n        "name": "Add OAuth2 Authentication",\n        "description": "Allow users to register for and use OAuth2 tokens for API authentication.",\n        "strategic_value": "Helps support all businesses, especially enterprises.",\n        "notes": "Allow users to register their applications to allow integration with ProductPlan.",\n        "percent_done": 0,\n        "tags": [\n          "enterprise",\n          "security",\n          "integrations"\n        ],\n        "fields": {\n          "pp_lanes": "Security",\n          "pp_legend": "3rd-Party Integrations"\n        },\n        "timestamps": {\n          "created_at": "2017-03-11T11:05:20-08:00",\n          "updated_at": "2017-03-11T11:05:20-08:00"\n        },\n        "links": {\n          "roadmap": {\n            "href": "/api/roadmaps/1"\n          },\n          "external_links": {\n            "href": "/api/ideas/61/external_links"\n          }\n        }\n      }\n    </code></pre><br><p class="alert alert-info"><strong>Hint:</strong>&nbsp; Use the <i>Request Parameters</i> in <a href=#/1/controller/V1-Endpoints-Ideas/show>Ideas#show</a> to have more control over the data returned.</p></div><div id=example_idea_delete class=h3_section><br><h3>Delete an existing Idea</h3><br><h5>Request:</h5><pre>curl --request DELETE \\\n     --header  "X-Api-Version: 1" \\\n     --header  "Authorization: Bearer ${API_TOKEN}" \\\n     https://app.productplan.com/api/ideas/63</pre><br><h5>Response:</h5><p><code>Status: 204 No Content</code></p><br><p class="alert alert-info"><strong>Hint:</strong>&nbsp; See <a href=#/1/controller/V1-Endpoints-Ideas/destroy>Ideas#destroy</a>.</p></div></div><div id=notes style="display: none"><br><br><hr><div><strong>TODO</strong><ul><li>Branding (styling, images, terms, colors, etc)</li><li>Open bug w/ praxis: see slack for last conversation</li><li>Open bug w/ praxis: see ExternalLink for example:<ul><li>create/update payload example: doesn\'t adhere to attribut restriction of inlcude one of either A or B, but not both. (ExternalLink bar/idea)</li><li>show &amp; index examples: show two things that shouldn\'t be together: seemingly no way to override (ExternalLink links)</li></ul></li><li>Use Pundit for authorization</li><li>Refactoring</li></ul></div></div>'),a.put("views/layout.html",'<ng-include src="\'views/navbar.html\'"></ng-include><div class=container ng-cloak><div class=row><div class="col-sm-4 col-md-3" ng-controller=MenuCtrl ng-include="\'views/menu.html\'"></div><div class="col-sm-8 col-md-9" ui-view="" autoscroll=true></div></div></div>'),a.put("views/menu.html",'<div class="sidebar fixed-if-fits hidden-print"><div class=row><div class=col-sm-12><p><div ng-if="versions.length > 1" dropdown dropdown-append-to-body><button type=button class="btn btn-success" dropdown-toggle ng-disabled=disabled>{{:: versionLabel}}: {{selectedVersion}} <span class=caret></span></button><ul class=dropdown-menu role=menu><li ng-repeat="version in versions"><a ng-click=select(version) dropdown-toggle>{{version}}</a></li></ul></div><div ng-if="versions.length == 1" class="btn btn-success">{{:: versionLabel}}: {{selectedVersion}}</div></p></div></div><div class=row><div class=col-sm-12><tabset justified=true class=tab-list-group><tab heading=Resources active=active.resources><div class=list-group><menu-item ng-repeat="link in availableResources() | orderBy: \'name\'" link=link toplevel=true></menu-item></div></tab><tab heading=Schemas active=active.schemas><div class=list-group><menu-item ng-repeat="link in availableSchemas() | orderBy: \'name\'" link=link toplevel=true></menu-item></div></tab></tabset></div></div></div>'),a.put("views/navbar.html",'<div class=header><div class="navbar navbar-default navbar-fixed-top" role=navigation><div class=container><div class=navbar-header><a class=navbar-brand href="#/"><img width=214 height=25 alt=ProductPlan src=https://cache.productplan.com/logos/pp_logo_214x25.png></a> <a class="navbar-brand navbar-brand-text" href="#/">{{" - API Browser"}}</a></div></div></div></div>'),a.put("views/types/embedded/filtering_params.html",'<tr><td ng-bind-html="name | attributeName"></td><td><a href=#/concepts/filtering_params>Filtering</a></td><td>Filter results based on the following fields:<ul><li ng-repeat="(name,spec) in type.filters"><code>{{name}}</code> using <code>{{ spec.operators }}</code> <span ng-if="spec.fuzzy == true"><i>allows fuzzy matches</i></span></li></ul><dt>Example</dt><dd><code>{{details.example}}</code></dd></td></tr>'),a.put("views/types/embedded/ordering_params.html",'<tr><td ng-bind-html="name | attributeName"></td><td><a href=#/concepts/ordering_params>Ordering</a></td><td><div ng-if=type.fields_allowed><p>Results can be ordered by the following fields: {{ type.fields_allowed.toString() }}.</p><p ng-if="type.enforced_for === \'all\'">All ordering positions will be enforced to match those fields.</p><p ng-if="type.enforced_for !== \'all\'">Only the first ordering position will be enforced to match those fields.</p></div><p ng-if="! type.fields_allowed">Results can be ordered by any field name</p><attribute-description attribute=details></attribute-description></td></tr>'),a.put("views/types/embedded/pagination_params.html",'<tr><td ng-bind-html="name | attributeName"></td><td><a href=#/concepts/pagination_params>Paginator</a></td><td><p ng-if="type.disallowed === undefined">Results can be paginated using either <code>page-based</code> or <code>cursor-based</code> mode. The default is <span ng-if="type.default_mode.by === undefined"><code>page={{ type.default_mode.page }}</code>.</span> <span ng-if="type.default_mode.page === undefined"><code>by={{ type.default_mode.by }}</code>.</span></p><p ng-if="type.disallowed.indexOf(\'cursor\') > -1">Results can only be paginated using <code>paging</code> (cursor-based pagination is explicitly disallowed).</p><p ng-if="type.disallowed.indexOf(\'paging\') > -1">Results can only be paginated using <code>cursors</code> (page-based pagination is explicitly disallowed).</p><p ng-if="(type.disallowed === undefined) || (type.disallowed.indexOf(\'paging\') > -1)">For cursor-based pagination, the allowed fields are <code>{{ type.fields_allowed.toString() }}</code>.</p><p>The default amount of items per request is set to <code>{{ type.page_size }}</code> with a hard maximum set at <code>{{ type.max_items}}</code>.</p><attribute-description attribute=details></attribute-description></td></tr>');
}]);