"use strict";(self.webpackChunkpraxis_site=self.webpackChunkpraxis_site||[]).push([[5528],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,g=u["".concat(l,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6435:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={title:"Designing our API resources",sidebar_label:"Designing our API resources"},o=void 0,s={unversionedId:"gettingStarted/designingApiResources",id:"gettingStarted/designingApiResources",title:"Designing our API resources",description:"Our goal is to build an API that contains Posts and embedded Comments. So let's first scaffold the design part for them. To do so, the easiest way is to use the Praxis scaffold generator, so let's do that:",source:"@site/docs/gettingStarted/designingApiResources.md",sourceDirName:"gettingStarted",slug:"/gettingStarted/designingApiResources",permalink:"/docs/gettingStarted/designingApiResources",draft:!1,tags:[],version:"current",frontMatter:{title:"Designing our API resources",sidebar_label:"Designing our API resources"},sidebar:"mainSidebar",previous:{title:"Intro",permalink:"/docs/gettingStarted/intro"},next:{title:"Setting Up Our Database",permalink:"/docs/gettingStarted/settingUpOurDB"}},l={},p=[],d={toc:p},u="wrapper";function c(e){let{components:t,...i}=e;return(0,r.kt)(u,(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Our goal is to build an API that contains ",(0,r.kt)("inlineCode",{parentName:"p"},"Posts")," and embedded ",(0,r.kt)("inlineCode",{parentName:"p"},"Comments"),". So let's first scaffold the design part for them. To do so, the easiest way is to use the Praxis scaffold generator, so let's do that:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"bundle exec praxis g posts --model\nbundle exec praxis g comments --model\n")),(0,r.kt)("p",null,"Each of these scaffold generation commands will create the design files (MediaType and Endpoint) that are necessary to define the API actions and resource shapes we want to expose. By default, the generator will create the standard set of CRUD actions for each endpoint: ",(0,r.kt)("inlineCode",{parentName:"p"},"create"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"index"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"show"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"update")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"delete"),". This can be further customized by passing extra flags to the generators as well."),(0,r.kt)("p",null,"Since we didn't specify the ",(0,r.kt)("inlineCode",{parentName:"p"},"--no-implementation")," flag, the generator above has also created the corresponding implementation files (Controller and Resource) that go with the given design. We commonly would want to generate the implementation side of the API after we have iterated on, and we are happy with the design, but for the sake of this guide we'll just generate them all upfront. Also, since we know we're using a DB, we have also explicitly asked the generator to create the model file for us with ",(0,r.kt)("inlineCode",{parentName:"p"},"--model")," (defaulting to an ActiveRecord model, but Sequel is also supported)"),(0,r.kt)("p",null,"So with all that scaffolding in place, it's time to put on our design hat. The first thing we need to do is to fill in the API attributes that we want ",(0,r.kt)("inlineCode",{parentName:"p"},"Posts")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Comments")," to have. For now, let's start simple and assume that a ",(0,r.kt)("inlineCode",{parentName:"p"},"Post")," only has an ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," (",(0,r.kt)("inlineCode",{parentName:"p"},"Integer"),"), a ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," (",(0,r.kt)("inlineCode",{parentName:"p"},"String"),"), some ",(0,r.kt)("inlineCode",{parentName:"p"},"contents")," (",(0,r.kt)("inlineCode",{parentName:"p"},"String"),") and an author (a ",(0,r.kt)("inlineCode",{parentName:"p"},"User"),"). Add these attributes into the ",(0,r.kt)("inlineCode",{parentName:"p"},"Post")," MediaType in ",(0,r.kt)("inlineCode",{parentName:"p"},"design/v1/media_types/post.rb")," so that its attributes block looks like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"attributes do\n  attribute :id, Integer\n  attribute :title, String\n  attribute :content, String\n  attribute :author, User\nend\n")),(0,r.kt)("p",null,"Similarly, for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Comment")," MediaType, let's assume we want it to also have an ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", some ",(0,r.kt)("inlineCode",{parentName:"p"},"contents")," (",(0,r.kt)("inlineCode",{parentName:"p"},"String"),"), a related ",(0,r.kt)("inlineCode",{parentName:"p"},"Post"),", and finally the ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," that wrote it. To achieve that, we need the attributes on our ",(0,r.kt)("inlineCode",{parentName:"p"},"Comment")," MediaType in  ",(0,r.kt)("inlineCode",{parentName:"p"},"design/v1/media_types/comment.rb")," to look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ruby"},"attributes do\n  attribute :id, Integer\n  attribute :content, String\n  attribute :post, Post\n  attribute :user, User\nend\n")),(0,r.kt)("p",null,"At this point, having the CRUD actions scaffolded by the generator, and having designed the shape of the attributes for ",(0,r.kt)("inlineCode",{parentName:"p"},"Post")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Comment")," we might feel it's a suitable moment to celebrate. Do you want to see the full API documentation of what we just built? No problem! You can generate the OpenAPI docs and view them in ReDoc with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"bundle exec praxis docs browser\n")),(0,r.kt)("p",null,"That should open your browser and show you something like:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Docusaurus",src:n(4787).Z,width:"1356",height:"1034"})),(0,r.kt)("p",null,"Nice, huh? Fully documented, with examples and all. Well, we might be feeling pretty good about our design, but we need to actually implement something before breaking out the champagne. Before we jump into the implementation phase, however, we first need to make sure we have a properly built DB and have configured our models. Let's take a quick parenthesis to get all that setup."))}c.isMDXComponent=!0},4787:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/first-api-doc-browser-cb7f9de90007e404a8a1253300dc2f4c.png"}}]);