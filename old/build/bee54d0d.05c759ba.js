(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{114:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var a=n(3),i=n(7),o=(n(0),n(133)),r={title:"Actions"},s={unversionedId:"reference/design/actions",id:"reference/design/actions",isDocsHomePage:!1,title:"Actions",description:"Each of the available actions for an endpoint are defined using the action method. At a minimum, an action definition must have a name and at least one route. It's a good idea to add a description for each action so Praxis can use it when generating documentation. In addition to a description an action can also specify:",source:"@site/docs/reference/design/actions.md",slug:"/reference/design/actions",permalink:"/docs/reference/design/actions",version:"current",sidebar:"mainSidebar",previous:{title:"Endpoints",permalink:"/docs/reference/design/endpoints"},next:{title:"General API Definitions",permalink:"/docs/reference/design/api-definition"}},l=[{value:"Routing",id:"routing",children:[{value:"Route parameters",id:"route-parameters",children:[]}]},{value:"Params",id:"params",children:[]},{value:"Payload",id:"payload",children:[{value:"Payload inheritance",id:"payload-inheritance",children:[]}]},{value:"Headers",id:"headers",children:[]},{value:"Responses",id:"responses",children:[]}],c={toc:l};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Each of the available actions for an endpoint are defined using the ",Object(o.b)("inlineCode",{parentName:"p"},"action")," method. At a minimum, an action definition must have a name and at least one route. It's a good idea to add a description for each action so Praxis can use it when generating documentation. In addition to a description an action can also specify:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"routing"),": paths that should map to this action"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"params"),": the structure of the incoming query string and the parameters you expect tofind in it"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"payload"),": the structure of the incoming request body"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"headers"),": specific named headers that Praxis should parse and make available to this action"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"responses"),": type and code of the possible responses the action can generate"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"nodoc!"),": this action should not be included in documentation. Also any types defined withinits payload or parameter blocks will not appear in the generated documentation.")),Object(o.b)("h2",{id:"routing"},"Routing"),Object(o.b)("p",null,"The routing block defines the way Praxis will map requests to your actions.\nThis DSL accepts one or more entries of the form: HTTP verb, path (with colon\nencoded capture variables), and options. For example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ruby"}),"action :index do\n  routing do\n    get 'blogs'\n    get '//orgs/:org_id/blogs'\n  end\nend\n")),Object(o.b)("p",null,"Praxis has convenience methods for all the HTTP verbs defined in the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://tools.ietf.org/html/rfc7231#section-4.3"}),"HTTP/1.1\nSpecification")," (OPTIONS, GET,\nHEAD, POST, PUT, DELETE, TRACE and CONNECT) plus\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"http://tools.ietf.org/html/rfc5789"}),"PATCH"),"."),Object(o.b)("p",null,"Praxis also accepts the 'ANY' verb keyword to indicate that the given route should\nmatch for any incoming verb string. Routes with concrete HTTP verbs will always\ntake precendence against 'ANY' verb routes. For instance, take a look at the following\nsimplistic and contrived example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ruby"}),"class Blogs\n  include Praxis::EndpointDefinition\n\n  action :show do\n    routing { get '/:id' }\n    description 'Fetch one blog entry'\n  end\n  action :other do\n    routing { any '/:id' }\n    description 'Do other stuff with non GET verbs'\n  end\nend\n")),Object(o.b)("p",null,"In this case an incoming ",Object(o.b)("inlineCode",{parentName:"p"},'"GET /"')," request will always invoke the ",Object(o.b)("inlineCode",{parentName:"p"},":show")," action,\nwhile others like ",Object(o.b)("inlineCode",{parentName:"p"},'"POST /"')," or ",Object(o.b)("inlineCode",{parentName:"p"},'"PATCH /"')," will always map the the ",Object(o.b)("inlineCode",{parentName:"p"},":other")," action.\nUsing the 'ANY' verb is mostly a convenience to avoid repeating several routes with\nthe same exact path for an action that needs to respond to all those verbs in the\nsame manner. There is a subtle difference, however, and that is that using 'ANY'\nwill truly accept any incoming HTTP verb string, while listing them in several routes\nwill need to match the specific supported names. For example, an 'ANY' route like the\nabove will be able to match incoming requests like ",Object(o.b)("inlineCode",{parentName:"p"},'"LINK /"')," or ",Object(o.b)("inlineCode",{parentName:"p"},'"UNLINK /"')," (assuming the Web\nserver supports it)."),Object(o.b)("p",null,"Remember that Praxis prefixes all your resources' routes with a string based\non the name of your enclosing endpoint definition class, in this case\n'/blogs' since our class is called ",Object(o.b)("inlineCode",{parentName:"p"},"Blogs"),". You can, however, override the prefix for a single route by prepending '//' to the path (like in the example above) if you don't want the resource-wide prefix to apply. Alternately, you can provide a special prefix of either ",Object(o.b)("inlineCode",{parentName:"p"},"''")," or ",Object(o.b)("inlineCode",{parentName:"p"},"'//'")," in the routing block to clear the prefix for any other paths given."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Note"),": The above 'resetting' behavior of '//' applies ",Object(o.b)("em",{parentName:"p"},"only")," to any Resource-level route prefixes that may be defined. It will ",Object(o.b)("em",{parentName:"p"},"not")," override an API-wide ",Object(o.b)("inlineCode",{parentName:"p"},"base_path")," if one is defined (see ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"global-api-information/"}),"Global Api Info"),")."),Object(o.b)("p",null,"You can inspect the complete Praxis routing table using ",Object(o.b)("inlineCode",{parentName:"p"},"praxis routes")," or ",Object(o.b)("inlineCode",{parentName:"p"},"rake praxis:routes"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"$ rake praxis:routes\n+---------------------------------------------------------------------------+\n| Version |        Path         | Verb | Resource | Action | implementation |\n+---------------------------------------------------------------------------+\n| n/a     | /blogs              | GET  | Blogs    | index  | -n/a-          |\n| n/a     | /orgs/:org_id/blogs | GET  | Blogs    | index  | -n/a-          |\n+---------------------------------------------------------------------------+\n")),Object(o.b)("p",null,"The route command supports the ",Object(o.b)("inlineCode",{parentName:"p"},"json")," format parameter (i.e., ",Object(o.b)("inlineCode",{parentName:"p"},"praxis routes json"),") to retrieve the complete routing table in JSON format instead of the tabular example above."),Object(o.b)("h3",{id:"route-parameters"},"Route parameters"),Object(o.b)("p",null,"Routes can also take optional parameters. Any of those options passed to the route will be sent to the underlying routing engine (Mustermann). This makes it possible to use advanced features like wildcards, and extra type matching restrictions. For example, the following route will match any url ending with ",Object(o.b)("inlineCode",{parentName:"p"},"/do_stuff")," except if it starts with ",Object(o.b)("inlineCode",{parentName:"p"},"/special"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ruby"}),"action :wildcards do\n  routing do\n    get '/*/do_stuff' , except: '/special*'\n  end\n  description \"Will match '/foo/bar/do_stuff' but not '/special/do_stuff\"\n  params do\n    # :splat will contain the mathing pieces of the wildcards\n    attribute :splat, Attributor::Collection.of(String)\n  end\nend\n")),Object(o.b)("p",null,"Notice in the example above that if we use wilcard operators for our routes, we will also need to declare the\n",Object(o.b)("inlineCode",{parentName:"p"},":splat")," parameter in our action definition. This parameter will contain a collection of strings matching every wildcard in our route (and yes, you can have a route with multiple wildcards). If only one wildcard is used, ",Object(o.b)("inlineCode",{parentName:"p"},":splat")," will still be an array, and will contain a single string element in it. See the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/rkh/mustermann"}),"Mustermann site")," for more information about pattern types and other supported options."),Object(o.b)("h2",{id:"params"},"Params"),Object(o.b)("p",null,"Praxis allows you to define the expected structure of incoming request\nparameters in the query string, in the URL itself and in the request body\n(payload). By doing so, you can let the framework perform basic request\nvalidation and coercion of values into their expected types. This is also a key\ncomponent of the Praxis documentation generator."),Object(o.b)("p",null,"In Praxis actions, the ",Object(o.b)("inlineCode",{parentName:"p"},"params")," stanza is used to describe incoming parameters that can\nbe found in both the action path (route) or the query string. In case of name\nconflicts, parameters in the path always take precedence over parameters in\nthe query string."),Object(o.b)("p",null,"You can define the expected structure of URL and query string parameters by\nusing the ",Object(o.b)("inlineCode",{parentName:"p"},"params")," method with a block. Use the standard Attributor::Struct\ninterface to declare attributes."),Object(o.b)("p",null,"For example, if you want to pass a simple boolean query string parameter in your blog index action you could define it like so:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ruby"}),"action :index do\n  routing { get '' }\n  params do\n    attribute :force, Attributor::Boolean, default: false\n  end\nend\n")),Object(o.b)("h2",{id:"payload"},"Payload"),Object(o.b)("p",null,"Similar to params, you can define the expected structure of the incoming request body\nusing the ",Object(o.b)("inlineCode",{parentName:"p"},"payload")," method. As in the case of ",Object(o.b)("inlineCode",{parentName:"p"},"params"),", Attributes are optional\nby default, so mark them as required if they must be present so Praxis can\nvalidate them for you."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ruby"}),"action :create do\n  routing { post '' }\n  payload do\n    attribute :title, String, required: true\n    attribute :text, String, required: true\n    attribute :author do\n      attribute :id, Integer, required: true\n    end\n    attribute :tags, Attributor::Collection.of(String)\n  end\nend\n")),Object(o.b)("p",null,"Give that payload definition sending the\nfollowing request body with an 'application/json' content type will pass\nvalidation:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ruby"}),'{\n  "title": "Why I Ditched My Co-Working Space",\n  "text": "Last summer I tried the start-up dream. I moved into...",\n  "author": {\n    "id": 29\n  }\n}\n')),Object(o.b)("p",null,"Note that unlike other frameworks like Rails and Sinatra, Praxis explicitly\ndistinguishes payload parameters from URL parameters (path and query string\nparameters). Be sure not to expect any parameters coming from the request body\nin the ",Object(o.b)("inlineCode",{parentName:"p"},"params")," accessor. Request body parameters will only appear in\n",Object(o.b)("inlineCode",{parentName:"p"},"payload"),"."),Object(o.b)("h3",{id:"payload-inheritance"},"Payload inheritance"),Object(o.b)("p",null,"It is common practice (especially in RESTful APIs) to be able to accept incoming resource payloads that closely match outgoing resource responses receive from the same API. For example, if you get a blog MediaType from a show action, it is nice to easily modify parts of it, and re-POST it to the API to save some changes. To help with this, Praxis will maps any payload attribute definition of any action to its corresponding attribute of the default MediaType of the Resource. By doing that, the designer can define attributes by name, without being required to specify the type and/or options that might exist in the associated MediaType."),Object(o.b)("p",null,"In other words: Praxis will inject a ",Object(o.b)("inlineCode",{parentName:"p"},":reference")," parameter to the payload, pointing to the defined default MediaType of the endpoint (refer to ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"media-types"}),"MediaType")," for more info). It is for this reason that the following ",Object(o.b)("inlineCode",{parentName:"p"},"create")," action payload definition is enough if the default MediaType of the corresponding ",Object(o.b)("inlineCode",{parentName:"p"},"Post")," resource has those same attribute names defined."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"action :create do\n  routing { post '' }\n  payload do\n    attribute :title, required: true\n    attribute :text, required: true\n    attribute :author\n    attribute :tags\n  end\nend\n")),Object(o.b)("p",null,"Also, know that you can mix and match the inherited attributes with other ones that do not exist in the MediaType. For example, the above payload can also add a new attribute called ",Object(o.b)("inlineCode",{parentName:"p"},":hidden")," which includes its type, description or any other options it requires."),Object(o.b)("p",null,"TODO: MultiPart payloads!!"),Object(o.b)("h2",{id:"headers"},"Headers"),Object(o.b)("p",null,"Action definitions can call out special request headers that Praxis validates\nand makes available to your actions, just like ",Object(o.b)("inlineCode",{parentName:"p"},"params")," and ",Object(o.b)("inlineCode",{parentName:"p"},"payload"),".  Use the\n",Object(o.b)("inlineCode",{parentName:"p"},"headers")," method with the attributor interface for hashes to define request header\nexpectations:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ruby"}),"action :create do\n  routing { post '' }\n  headers do\n    key \"Authorization\", String, required: true\n  end\nend\n")),Object(o.b)("p",null,"In addition to defining a header ",Object(o.b)("inlineCode",{parentName:"p"},"key")," in the standard ",Object(o.b)("inlineCode",{parentName:"p"},"Hash")," manner, Praxis\nalso enhances the DSL with a ",Object(o.b)("inlineCode",{parentName:"p"},"header")," method that can shortcut the syntax for\ncertain common cases. The ",Object(o.b)("inlineCode",{parentName:"p"},"header")," DSL takes a String name, and an optional type or expected value:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"if no value is passed, the only expectation is that a header with that name is received."),Object(o.b)("li",{parentName:"ul"},"if a Class is passed, it is used as the type to coerce the header value to."),Object(o.b)("li",{parentName:"ul"},"if a Regexp value is passed, the expectation is that the header value (if exists) matches it"),Object(o.b)("li",{parentName:"ul"},"if a String value is passed, the expectation is that the incoming header value (if exists) fully matches it.")),Object(o.b)("p",null,"Note: specifying both header type ",Object(o.b)("em",{parentName:"p"},"and")," value is not supported with the ",Object(o.b)("inlineCode",{parentName:"p"},"header")," method. If you need to use a non-String type and validate the contents in some other way, use the standard ",Object(o.b)("inlineCode",{parentName:"p"},"key")," method instead."),Object(o.b)("p",null,"Any hash-like options provided as the last argument are passed along to the\nunderlying ",Object(o.b)("inlineCode",{parentName:"p"},"Attributor")," types. Here are some examples of how to define header expectations:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ruby"}),'headers do\n  # Defining a required header\n  header "Authorization"\n  # Which is equivalent to\n  key "Authorization", String, required: true\n\n  # Defining a non-required header that must match a given regexp\n  header "Authorization", /Secret/\n  # Which is equivalent to\n  key "Authorization", String, regexp: /Secret/\n\n  # Defining a required header that must be equal to "hello"\n  header "Authorization", "hello", required: true\n  # Which is equivalent to\n  key "Authorization", String, values: ["hello"], required: true\n\n  # Define a header that is cast as an Integer\n  header "Account-Id", Integer\n  # Which is equivalent to\n  key "Account-Id", Integer\nend\n')),Object(o.b)("p",null,"Using the simplified ",Object(o.b)("inlineCode",{parentName:"p"},"headers")," syntax can cover most of your typical definitions, while the native\n",Object(o.b)("inlineCode",{parentName:"p"},"Hash")," syntax allows you to mix and match many more options. Which one to use is up to you. They\nboth can perfectly coexist at the same time."),Object(o.b)("h2",{id:"responses"},"Responses"),Object(o.b)("p",null,"All actions must specify the list of responses that they can return. Do this by\nusing the ",Object(o.b)("inlineCode",{parentName:"p"},"response")," method and passing a response name, as well as any additional arguments if applicable."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-ruby"}),"action :create do\n  routing { post '' }\n  response :on_a_break\nend\n")),Object(o.b)("p",null,"Praxis already provides a set of common responses to work with, but an\napplication can register its own custom responses too. Each registered response\nhas a unique name which is the name to use in the call to ",Object(o.b)("inlineCode",{parentName:"p"},"response"),"."),Object(o.b)("p",null,"If the controller for this action can explicitly return any of the common HTTP errors, its endpoint definition for the action must also explicitly list those responses. For example, if the controller for the ",Object(o.b)("inlineCode",{parentName:"p"},":show"),' action uses a "404 Not Found" to indicate that a given resource id is not present in the DB, the response ',Object(o.b)("inlineCode",{parentName:"p"},":not_found")," must be defined in its list of responses. Another way to see this requirement is that any response class that any controller action can return, must have its name listed in the allowed responses of its endpoint definition."),Object(o.b)("p",null,"For more information, please see ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"responses"}),"Responses"),"."))}p.isMDXComponent=!0},133:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),p=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),b=a,h=d["".concat(r,".").concat(b)]||d[b]||u[b]||o;return n?i.a.createElement(h,s(s({ref:t},c),{},{components:n})):i.a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=b;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);