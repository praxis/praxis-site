"use strict";(self.webpackChunkpraxis_site=self.webpackChunkpraxis_site||[]).push([[9166],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(r),f=a,m=c["".concat(l,".").concat(f)]||c[f]||d[f]||o;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},6813:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const o={title:"Intro"},i=void 0,s={unversionedId:"gettingStarted/intro",id:"gettingStarted/intro",title:"Intro",description:"So you're new to Praxis, you've read some of the interesting stuff that it can do and",source:"@site/docs/gettingStarted/intro.md",sourceDirName:"gettingStarted",slug:"/gettingStarted/intro",permalink:"/docs/gettingStarted/intro",draft:!1,tags:[],version:"current",frontMatter:{title:"Intro"},sidebar:"mainSidebar",next:{title:"Designing our API resources",permalink:"/docs/gettingStarted/designingApiResources"}},l={},u=[],p={toc:u},c="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"So you're new to Praxis, you've read some of the interesting stuff that it can do and\nyou're ready to see it in action? Great! You're in the right place."),(0,a.kt)("p",null,"Let's show you how easy it is to create a fully functioning API from scratch, capable of serving posts (that are authored by users), each of which can contain comments where each comment is also made by one of the existing users. We'll design and build it from soup to nuts, from being able to query the API for Posts, with filtering, sorting and pagination, to being able to create, update and delete the Posts as well."),(0,a.kt)("p",null,"To simplify the setup, we will use an embedded SQLite DB, but you can easily configure\nthe app to work with MySQL or PostgreSQL later if you'd like."),(0,a.kt)("p",null,"The fastest way to start is to create a simple Praxis application example. To do so, let's use the Praxis\nexample app generator to build us one. We'll call it ",(0,a.kt)("inlineCode",{parentName:"p"},"firstapp"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"gem install praxis # Let's make sure we have Praxis 2.x installed in the system\npraxis example firstapp && cd firstapp\nbundle\n")),(0,a.kt)("p",null,"This example Praxis app is a very simple API that is able to list users stored in a DB, which have only a few attributes defined (i.e., id, uuid, email, first_name and last_name). That's it, there is not much in there, but at least it has the basic directory structure, Gemfile, etc."),(0,a.kt)("p",null,"Ok so at this point we already have a fully bundled Praxis app. We can now create, migrate and populate its DB with some users, and then we can trivially start it up on port 9292 with ",(0,a.kt)("inlineCode",{parentName:"p"},"bundle exec rake db:recreate && bundle exec rackup"),". "),(0,a.kt)("p",null,"If you are curious about what you just started, you can test it out by getting the list of all populated users by issuing the following curl command from a different shell:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# Get all Users in the DB\n# Note that api version can also be requested through an X-Api-Version header\ncurl 'http://localhost:9292/users?api_version=1'\n")),(0,a.kt)("p",null,"Alright then. We have a basic app scaffold and some users in a database. Seems like a good starting point to build on. Let's stop our server (CTRL-C) for now, and start building our Posts and Comments API."))}d.isMDXComponent=!0}}]);