"use strict";(self.webpackChunkpraxis_site=self.webpackChunkpraxis_site||[]).push([[1543],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=i,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||o;return t?a.createElement(h,r(r({ref:n},d),{},{components:t})):a.createElement(h,r({ref:n},d))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6062:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=t(7462),i=(t(7294),t(3905));const o={title:"Responses"},r=void 0,s={unversionedId:"reference/design/response-definitions",id:"reference/design/response-definitions",title:"Responses",description:"Praxis allows API designers to define the set of response templates the",source:"@site/docs/reference/design/response-definitions.md",sourceDirName:"reference/design",slug:"/reference/design/response-definitions",permalink:"/docs/reference/design/response-definitions",draft:!1,tags:[],version:"current",frontMatter:{title:"Responses"},sidebar:"mainSidebar",previous:{title:"General API Definitions",permalink:"/docs/reference/design/api-definition"},next:{title:"Traits",permalink:"/docs/reference/design/traits"}},l={},p=[{value:"Preregistered Responses",id:"preregistered-responses",level:2},{value:"Defining Response Expectations",id:"defining-response-expectations",level:2},{value:"Headers",id:"headers",level:3},{value:"MediaType",id:"mediatype",level:3},{value:"Location",id:"location",level:3},{value:"Multipart responses",id:"multipart-responses",level:3}],d={toc:p},u="wrapper";function c(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Praxis allows API designers to define the set of response templates the\napplication can return. By designing a response, you are describing a set of\nexpectations about its structure and attributes. You then give it a name and\ntell Praxis about it using ",(0,i.kt)("inlineCode",{parentName:"p"},"response_template"),"."),(0,i.kt)("p",null,"Here is an example of how to design a response definition:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"ApiDefinition.define do\n  response_template :ok do\n    description 'An ok response refers to a successful outcome'\n    status 200\n    media_type 'application/vnd.acme.user'\n    headers name: 'X-Header1', value: 'foo', description: 'This is a very nais header, which has value foo'\n    headers name: 'X-Header2', value: /bar/, description: 'This header contains the bar string'\n    headers name: 'X-Some-Stuff', value: nil, description: 'This only requires the header to exist, with any value'\n  end\nend\n")),(0,i.kt)("p",null,"This creates a response definition named ",(0,i.kt)("inlineCode",{parentName:"p"},"ok")," with a human-readable description which will be rendered in the API documentation. With this we are declaring that this response will:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"have a status code of 200"),(0,i.kt)("li",{parentName:"ul"},"return an ",(0,i.kt)("inlineCode",{parentName:"li"},"application/vnd.acme.user")," media type (the value of the Content-Type header)"),(0,i.kt)("li",{parentName:"ul"},"contain, at least, the following two headers:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"X-Header1"),' which must always match a literal value "foo"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"X-Header2")," which must always match the regular expression ",(0,i.kt)("inlineCode",{parentName:"li"},"/bar/")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"X-Some-Stuff")," which can have any value")))),(0,i.kt)("p",null,"Any action may refer to a response by name when declaring its list of expected\nresponses. For example, here is a snippet of an action describing\nthat it can return the ",(0,i.kt)("inlineCode",{parentName:"p"},"ok")," response defined above."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# somewhere in a resource definition...\naction :index do\n  routing { get '' }\n  response :ok\nend\n")),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"../design/actions/"},"ActionDefinitions")," for more information about\nhow to specify which responses an action can return."),(0,i.kt)("p",null,"Having response templates that have all fields statically defined like our example above, make it more difficult to reuse accross actions. For example, you may want to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ok")," definition above for an action that returns an a media-type other than ",(0,i.kt)("inlineCode",{parentName:"p"},"application/vnd.acme.user"),"."),(0,i.kt)("p",null,"For this reason, response definitons are parameterizable via block parameters.\nFor example, introducing a ",(0,i.kt)("inlineCode",{parentName:"p"},"media_type")," parameter in our previous ",(0,i.kt)("inlineCode",{parentName:"p"},"ok")," response\ncould be done like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"ApiDefinition.define do\n  response_template :ok do |media_type: 'application/vnd.acme.user'|\n    description 'An ok response refers to a successful outcome'\n    status 200\n    media_type media_type\n    headers name: 'X-Header1', value: 'foo', description: 'This is a very nais header, which has value foo'\n    headers name: 'X-Header2', value: /bar/, description: 'This header contains the bar string'\n    headers name: 'X-Some-Stuff', value: nil, description: 'This only requires the header to exist, with any value'\n  end\nend\n")),(0,i.kt)("p",null,"Parameterized responses allow you to reuse registered responses in action definitions with some flexibility:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# somewhere in a resource definition...\naction :index do\n  routing { get '' }\n  response :ok, media_type: 'application/custom'\nend\n")),(0,i.kt)("p",null,"This example response definition has not just a ",(0,i.kt)("inlineCode",{parentName:"p"},"media_type")," parameter but\nalso a default value of 'application/json'.  This allows you to override the\n",(0,i.kt)("inlineCode",{parentName:"p"},"media_type")," only when necessary. If you don't specify the ",(0,i.kt)("inlineCode",{parentName:"p"},"media_type"),",\nyou'll get ",(0,i.kt)("inlineCode",{parentName:"p"},"application/json"),". If you don't specify a default, you will have to\nexplicitly pass a value in every action that uses this response definition."),(0,i.kt)("h2",{id:"preregistered-responses"},"Preregistered Responses"),(0,i.kt)("p",null,"Praxis comes with many common response definitions pre-registered. All of them\nalso have customizable parameters. Here is how the basic ",(0,i.kt)("inlineCode",{parentName:"p"},"200 Ok")," response is defined. Note that one can add or override not just the mediatype but also, the location, any header expectations and even the description."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},'response_template :ok do |media_type: nil, location: nil, headers: nil, description: nil|\n  status 200\n  description( description || base_description ) # description can "potentially" be overriden in an individual action.\n\n  media_type media_type if media_type\n  location location if location\n  headers&.each do |(name, value)|\n    header(name: name, value: value)\n  end\nend\n')),(0,i.kt)("p",null,"And there are many others. In particular, Praxis automatically creates a\nresponse definition for every Response class in\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/praxis/praxis/blob/master/lib/praxis/responses/http.rb"},"responses/http.rb"),".\nEach of those definitions will have the name and status code specified in the\n",(0,i.kt)("inlineCode",{parentName:"p"},"self.response_name")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"self.status")," of those classes."),(0,i.kt)("p",null,"You can use any of these response definitions within your application without\nhaving to register them yourself. You can also override any of them with your\nown definition if the default one does not suit your needs."),(0,i.kt)("h2",{id:"defining-response-expectations"},"Defining Response Expectations"),(0,i.kt)("p",null,"When defining a response, you may include expectations for: status code,\nheaders, location, media_type and multipart parts."),(0,i.kt)("p",null,"All expectations in definitions are optional and potentially parameterizable\nwith the exception of status code. A status code must always be defined and set\nstatically. It is possible for multiple responses to share the same status code\nas they might differ in other expectations (i.e. different headers) which may\nbe enough to warrant a different name."),(0,i.kt)("h3",{id:"headers"},"Headers"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"header")," DSL in a response definition is how we can define expectations on the returned headers of a response. There are three types of expectations we can define:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Expecting to see a header with a given name, without specifying anything about its value."),(0,i.kt)("li",{parentName:"ul"},"Expecting to see a header with a given name, specifying that its contents will have a literal match to a specific value."),(0,i.kt)("li",{parentName:"ul"},"Expecting to see a header with a given name, specifying that its contents will match a given regular expression.")),(0,i.kt)("p",null,"Here's an example of each type of header definition:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"ApiDefinition.define do\n  # header field set with a String\n  response_template :found do\n    status 200\n    headers name: 'X-Header1', value: 'foo', description: 'This is a very nais header, which has value foo'\n    headers name: 'X-Header2', value: /bar/, description: 'This header contains the bar string'\n    headers name: 'X-Some-Stuff', value: nil, description: 'This only requires the header to exist, with any value'\n  end\n")),(0,i.kt)("h3",{id:"mediatype"},"MediaType"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"media_type")," method to set expectations for the media type of a response. The ",(0,i.kt)("inlineCode",{parentName:"p"},"media_type")," method can accept:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a string indicating the full internet media type identifier"),(0,i.kt)("li",{parentName:"ul"},"a complete Praxis MediaType class")),(0,i.kt)("p",null,"For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# Praxis media_type\nclass ExampleMediaType < Praxis::MediaType\nend\n\nApiDefinition.define do\n  # String media_type\n  response_template :found do\n    status 200\n    media_type 'application/json'\n  end\n\n  # Praxis::MediaType\n  response_template :found do\n    status 200\n    media_type ExampleMediaType\n  end\n\n  # Media type passed in via a required named parameter\n  response_template :found do |media_type: |\n    status 200\n    media_type media_type\n  end\nend\n")),(0,i.kt)("p",null,"Using a string for the media-type is equivalent to defining the 'Content-Type'\nheader with a string value. The reason for providing a media-type DSL is just a\nconvenience since (just like ",(0,i.kt)("inlineCode",{parentName:"p"},"Location"),") it is a common header to use."),(0,i.kt)("h3",{id:"location"},"Location"),(0,i.kt)("p",null,"A response definition can directly define a 'Location' header using the\n",(0,i.kt)("inlineCode",{parentName:"p"},"location")," method. This method can accept the same value matchers as any other\nheaders. In fact, underneath, the location method will call the ",(0,i.kt)("inlineCode",{parentName:"p"},"header")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"name: 'Location'"),". As such, it can also take a description"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"ApiDefinition.define do\n  response_template :redirection do\n    status 302\n    location 'http://www.example.com', description: 'Response to redirect you home'\n  end\n\n  response_template :created do\n    status 202\n    location /api/\n  end\nend\n")),(0,i.kt)("h3",{id:"multipart-responses"},"Multipart responses"),(0,i.kt)("p",null,"TODO!! Should we get rid and/or simplify multipart responses????"),(0,i.kt)("p",null,"Praxis also allows you to define that a given response will be of multipart type. Not only that, but it also allows to define expectations on the individual parts of the multipart response. You can do this by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"parts")," DSL."),(0,i.kt)("p",null,"Currently, the ",(0,i.kt)("inlineCode",{parentName:"p"},"parts")," DSL only allows you to define a common template\ndefinition to which ",(0,i.kt)("em",{parentName:"p"},"all")," parts must comply. In the future, we will extend the\nDSL to allow you to define different expectations for each individual part."),(0,i.kt)("p",null,"The DSL lets you define parts as if they were complete\nsub-requests. This can be done in either of the following ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"pass a block with a full response definition. This allows you to define a\npart inline, as if it were a new and complete sub-request."),(0,i.kt)("li",{parentName:"ul"},"pass a ",(0,i.kt)("inlineCode",{parentName:"li"},"like")," parameter which names an existing response definition")),(0,i.kt)("p",null,"Since a multipart part does not have a status code, Praxis will enforce the\nexpectation by looking at the value of a special 'Status' header. The rest of\nthe fields (headers, location and media_type) are native fields of the part."),(0,i.kt)("p",null,"Here are two examples of how to add part expectations using both of these\napproaches. Using a response block:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"ApiDefinition.define do\n  response_template :bulk_create do\n    status 200\n    media_type 'multipart/form-data'\n    parts do\n      status 201\n      media_type 'application/json'\n      location  /my_resource/\n    end\n  end\nend\n")),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},":like")," option:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"ApiDefinition.define do\n  response_template :bulk_create do\n    status 200\n    media_type 'multipart/form-data'\n    parts like: :create\n  end\nend\n")),(0,i.kt)("p",null,"Obviously, good reuse of these definitions requires parameterization, so a more\nrealistic definition of a multipart response could look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"ApiDefinition.define do\n  response_template :bulk_response do |parts: |\n    status 200\n    media_type 'multipart/form-data'\n    parts( parts )\n  end\nend\n")),(0,i.kt)("p",null,"You could allow an action to customize parts using the ",(0,i.kt)("inlineCode",{parentName:"p"},"like")," option or by\npassing a full response definition block. Here are some more examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ruby"},"# Using the :like option for parts like the :ok response\naction :bulk_operation do\n  routing { post '/bulk' }\n  response :bulk_response, parts: { like: :ok }\nend\n\n# Using the :like option for parts like the :ok response, but also overriding\n# the media-type of the :ok response\naction :bulk_operation do\n  routing { post '/bulk' }\n  response :bulk_response, parts: {\n    like: :ok,\n    media_type: ExampleMediaType\n  }\nend\n\n# Using a full response block definition\naction :bulk_operation do\n  routing { post '/bulk' }\n  sub_request = proc do\n    status 200\n    media_type ExampleMediaType\n    headers ['X-Foo','X-Bar']\n  end\n  response :bulk_response, parts: sub_request\nend\n")),(0,i.kt)("p",null,"The only reason to not pass the block directly in the response line is that\nRuby would never pass it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"parts")," parameter, but rather to the response\nfunction. Splitting into a different line to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"proc")," looks cleaner than\nadding the right parenthesis in one line."),(0,i.kt)("p",null,"For more information on multipart responses, please see\n",(0,i.kt)("a",{parentName:"p",href:"../design/multipart/"},"Responses"),"."))}c.isMDXComponent=!0}}]);